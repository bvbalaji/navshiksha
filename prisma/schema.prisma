// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Define enums to match your database's USER-DEFINED types
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum ContentType {
  TEXT
  VIDEO
  INTERACTIVE
  QUIZ
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum PlanStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ResourceType {
  PDF
  VIDEO
  LINK
  IMAGE
  DOCUMENT
  OTHER
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

// New enum for feedback types
enum FeedbackType {
  POSITIVE
  CONSTRUCTIVE
  QUESTION
  SUGGESTION
}

// ==================== USER MODELS ====================

model User {
  id                String    @id @default(uuid()) @db.Uuid
  name              String?
  email             String    @unique
  hashed_password   String?
  bio               String?
  profile_image_url String?
  role              UserRole
  created_at        DateTime  @default(now()) @db.Timestamptz()
  updated_at        DateTime  @updatedAt @db.Timestamptz()
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  enrollments       Enrollment[]
  progress          Progress[]
  ai_interactions   AIInteraction[]
  quiz_attempts     QuizAttempt[]
  user_achievements UserAchievement[]
  plan_assignments  PlanAssignment[]
  learning_plans    LearningPlan[]
  courses           Course[]
  resources         Resource[]
  user_profile      UserProfile?
  
  // Assigned plans (as assigner)
  assigned_plans    PlanAssignment[] @relation("AssignedBy")
  
  // New relations for teacher dashboard
  teacher_notes     TeacherNote[]
  student_feedback  StudentFeedback[] @relation("FeedbackFrom")
  teacher_feedback  StudentFeedback[] @relation("FeedbackTo")
  teaching_classes  Class[]
  announcements     Announcement[]
  student_notes     TeacherNote[]     @relation("StudentNotes")
  class_enrollments ClassStudent[]

  @@map("users")
  @@index([email])
  @@index([role])
}

model UserProfile {
  user_id                 String    @id @db.Uuid
  date_of_birth           DateTime? @db.Date
  education_level         String?
  preferred_language      String?
  timezone                String?
  learning_style          String?
  preferred_subjects      String[]
  notification_preferences Json?
  last_active             DateTime? @db.Timestamptz()
  
  // Relation
  user                    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Account {
  id                  String    @id @default(uuid()) @db.Uuid
  user_id             String    @db.Uuid
  provider            String
  provider_account_id String
  refresh_token       String?   @db.Text
  access_token        String?   @db.Text
  token_type          String?
  scope               String?   @db.Text
  id_token            String?   @db.Text
  expires_at          DateTime? @db.Timestamptz()
  created_at          DateTime  @default(now()) @db.Timestamptz()
  updated_at          DateTime  @updatedAt @db.Timestamptz()
  
  // Relation
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("accounts")
  @@unique([provider, provider_account_id])
  @@index([user_id])
}

model Session {
  id            String   @id @default(uuid()) @db.Uuid
  user_id       String   @db.Uuid
  session_token String   @unique
  expires_at    DateTime @db.Timestamptz()
  created_at    DateTime @default(now()) @db.Timestamptz()
  updated_at    DateTime @updatedAt @db.Timestamptz()
  ip_address    String?
  user_agent    String?
  
  // Relation
  user          User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([user_id])
  @@index([expires_at])
}

// ==================== CONTENT MODELS ====================

model Subject {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String?
  icon_url    String?
  created_at  DateTime  @default(now()) @db.Timestamptz()
  updated_at  DateTime? @updatedAt @db.Timestamptz()
  
  // Relations
  courses     Course[]
  learning_plans LearningPlan[]
  classes     Class[]

  @@map("subjects")
  @@index([name])
}

model Course {
  id                String      @id @default(uuid()) @db.Uuid
  title             String
  description       String?
  subject_id        String      @db.Uuid
  creator_id        String      @db.Uuid
  level             CourseLevel
  is_published      Boolean     @default(false)
  estimated_duration Int?
  thumbnail_url     String?
  created_at        DateTime    @default(now()) @db.Timestamptz()
  updated_at        DateTime?   @updatedAt @db.Timestamptz()
  
  // Relations
  subject           Subject    @relation(fields: [subject_id], references: [id])
  creator           User       @relation(fields: [creator_id], references: [id])
  modules           Module[]
  enrollments       Enrollment[]
  classes           ClassCourse[]

  @@map("courses")
  @@index([subject_id])
  @@index([creator_id])
  @@index([level])
  @@index([is_published])
}

model Module {
  id            String    @id @default(uuid()) @db.Uuid
  title         String
  description   String?
  course_id     String    @db.Uuid
  sequence_order Int
  created_at    DateTime  @default(now()) @db.Timestamptz()
  updated_at    DateTime? @updatedAt @db.Timestamptz()
  
  // Relations
  course        Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lessons       Lesson[]

  @@map("modules")
  @@index([course_id])
  @@index([course_id, sequence_order])
}

model Lesson {
  id                String      @id @default(uuid()) @db.Uuid
  title             String
  content           String
  module_id         String      @db.Uuid
  content_type      ContentType
  sequence_order    Int
  estimated_duration Int?
  created_at        DateTime    @default(now()) @db.Timestamptz()
  updated_at        DateTime?   @updatedAt @db.Timestamptz()
  
  // Relations
  module            Module     @relation(fields: [module_id], references: [id], onDelete: Cascade)
  progress          Progress[]
  quizzes           Quiz[]
  lesson_resources  LessonResource[]

  @@map("lessons")
  @@index([module_id])
  @@index([module_id, sequence_order])
  @@index([content_type])
}

model Resource {
  id            String       @id @default(uuid()) @db.Uuid
  title         String
  description   String?
  resource_type ResourceType
  url           String?
  content       String?
  created_by    String       @db.Uuid
  created_at    DateTime     @default(now()) @db.Timestamptz()
  updated_at    DateTime?    @updatedAt @db.Timestamptz()
  
  // Relations
  creator       User        @relation(fields: [created_by], references: [id])
  lesson_resources LessonResource[]

  @@map("resources")
  @@index([created_by])
  @@index([resource_type])
}

model LessonResource {
  lesson_id    String    @db.Uuid
  resource_id  String    @db.Uuid
  
  // Relations
  lesson       Lesson   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  resource     Resource @relation(fields: [resource_id], references: [id], onDelete: Cascade)

  @@id([lesson_id, resource_id])
  @@map("lesson_resources")
  @@index([lesson_id])
  @@index([resource_id])
}

// ==================== ASSESSMENT MODELS ====================

model Quiz {
  id            String    @id @default(uuid()) @db.Uuid
  title         String
  description   String?
  lesson_id     String    @db.Uuid
  time_limit    Int?
  passing_score Int       @default(70)
  created_at    DateTime  @default(now()) @db.Timestamptz()
  updated_at    DateTime? @updatedAt @db.Timestamptz()
  
  // Relations
  lesson        Lesson   @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  questions     QuizQuestion[]
  attempts      QuizAttempt[]

  @@map("quizzes")
  @@index([lesson_id])
}

model QuizQuestion {
  id            String       @id @default(uuid()) @db.Uuid
  quiz_id       String       @db.Uuid
  question_text String
  question_type QuestionType
  points        Int          @default(1)
  sequence_order Int
  created_at    DateTime     @default(now()) @db.Timestamptz()
  updated_at    DateTime?    @updatedAt @db.Timestamptz()
  
  // Relations
  quiz          Quiz      @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  options       QuizQuestionOption[]
  responses     QuizResponse[]

  @@map("quiz_questions")
  @@index([quiz_id])
  @@index([quiz_id, sequence_order])
}

model QuizQuestionOption {
  id            String    @id @default(uuid()) @db.Uuid
  question_id   String    @db.Uuid
  option_text   String
  is_correct    Boolean   @default(false)
  sequence_order Int
  
  // Relations
  question      QuizQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)
  responses     QuizResponse[]

  @@map("quiz_question_options")
  @@index([question_id])
}

model QuizAttempt {
  id            String    @id @default(uuid()) @db.Uuid
  user_id       String    @db.Uuid
  quiz_id       String    @db.Uuid
  score         Int
  passed        Boolean?
  started_at    DateTime  @default(now()) @db.Timestamptz()
  completed_at  DateTime? @db.Timestamptz()
  time_taken    Int?
  
  // Relations
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  quiz          Quiz   @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  responses     QuizResponse[]

  @@map("quiz_attempts")
  @@index([user_id])
  @@index([quiz_id])
  @@index([started_at])
}

model QuizResponse {
  id                String    @id @default(uuid()) @db.Uuid
  attempt_id        String    @db.Uuid
  question_id       String    @db.Uuid
  selected_option_id String?   @db.Uuid
  text_response     String?
  isCorrect         Boolean?
  points_awarded    Int?
  
  // Relations
  attempt           QuizAttempt @relation(fields: [attempt_id], references: [id], onDelete: Cascade)
  question          QuizQuestion @relation(fields: [question_id], references: [id], onDelete: Cascade)
  selected_option   QuizQuestionOption? @relation(fields: [selected_option_id], references: [id])

  @@map("quiz_responses")
  @@index([attempt_id])
  @@index([question_id])
}

// ==================== PROGRESS MODELS ====================

model Enrollment {
  id              String    @id @default(uuid()) @db.Uuid
  user_id         String    @db.Uuid
  course_id       String    @db.Uuid
  enrolled_at     DateTime  @default(now()) @db.Timestamptz()
  last_accessed_at DateTime? @db.Timestamptz()
  completed_at    DateTime? @db.Timestamptz()
  
  // Relations
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course          Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@map("enrollments")
  @@unique([user_id, course_id])
  @@index([user_id])
  @@index([course_id])
  @@index([enrolled_at])
}

model Progress {
  id                 String         @id @default(uuid()) @db.Uuid
  user_id            String         @db.Uuid
  lesson_id          String         @db.Uuid
  status             ProgressStatus
  progress_percentage Int           @default(0)
  last_position      String?
  time_spent         Int?
  created_at         DateTime       @default(now()) @db.Timestamptz()
  updated_at         DateTime?      @updatedAt @db.Timestamptz()
  completed_at       DateTime?      @db.Timestamptz()
  
  // Relations
  user               User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  lesson             Lesson        @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  @@map("progress")
  @@unique([user_id, lesson_id])
  @@index([user_id])
  @@index([lesson_id])
  @@index([status])
}

// ==================== ACHIEVEMENT MODELS ====================

model Achievement {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  description String
  icon_url    String?
  criteria    Json?
  created_at  DateTime  @default(now()) @db.Timestamptz()
  
  // Relations
  user_achievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id             String    @id @default(uuid()) @db.Uuid
  user_id        String    @db.Uuid
  achievement_id String    @db.Uuid
  earned_at      DateTime  @default(now()) @db.Timestamptz()
  
  // Relations
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  achievement    Achievement @relation(fields: [achievement_id], references: [id], onDelete: Cascade)

  @@map("user_achievements")
  @@unique([user_id, achievement_id])
  @@index([user_id])
  @@index([achievement_id])
  @@index([earned_at])
}

// ==================== LEARNING PLAN MODELS ====================

model LearningPlan {
  id          String      @id @default(uuid()) @db.Uuid
  title       String
  description String?
  subject_id  String      @db.Uuid
  level       CourseLevel
  duration    String?
  content     String?
  is_template Boolean     @default(false)
  created_by  String      @db.Uuid
  created_at  DateTime    @default(now()) @db.Timestamptz()
  updated_at  DateTime?   @updatedAt @db.Timestamptz()
  
  // Relations
  subject     Subject    @relation(fields: [subject_id], references: [id])
  creator     User       @relation(fields: [created_by], references: [id])
  assignments PlanAssignment[]
  objectives  LearningObjective[]

  @@map("learning_plans")
  @@index([subject_id])
  @@index([created_by])
  @@index([is_template])
}

// New model for learning objectives
model LearningObjective {
  id              String    @id @default(uuid()) @db.Uuid
  plan_id         String    @db.Uuid
  description     String
  success_criteria String?
  sequence_order  Int
  
  // Relations
  learning_plan   LearningPlan @relation(fields: [plan_id], references: [id], onDelete: Cascade)

  @@map("learning_objectives")
  @@index([plan_id])
}

model PlanAssignment {
  id          String     @id @default(uuid()) @db.Uuid
  plan_id     String     @db.Uuid
  user_id     String     @db.Uuid
  assigned_by String     @db.Uuid
  status      PlanStatus @default(ASSIGNED)
  assigned_at DateTime   @default(now()) @db.Timestamptz()
  start_date  DateTime?  @db.Date
  end_date    DateTime?  @db.Date
  notes       String?
  
  // Relations
  plan        LearningPlan @relation(fields: [plan_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  assigner    User     @relation("AssignedBy", fields: [assigned_by], references: [id])

  @@map("plan_assignments")
  @@index([plan_id])
  @@index([user_id])
  @@index([assigned_by])
  @@index([status])
}

// ==================== AI MODELS ====================

model AIInteraction {
  id              String    @id @default(uuid()) @db.Uuid
  user_id         String    @db.Uuid
  query           String
  response        String
  subject         String?
  session_id      String?
  feedback_rating Int?
  feedback_text   String?
  created_at      DateTime  @default(now()) @db.Timestamptz()
  
  // Relations
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("ai_interactions")
  @@index([user_id])
  @@index([session_id])
  @@index([created_at])
}

// ==================== ANALYTICS MODELS ====================

model AnalyticsEvent {
  id          String    @id @default(uuid()) @db.Uuid
  user_id     String?   @db.Uuid
  event_type  String
  event_data  Json?
  page_url    String?
  referrer    String?
  ip_address  String?
  user_agent  String?
  created_at  DateTime  @default(now()) @db.Timestamptz()

  @@map("analytics_events")
  @@index([user_id])
  @@index([event_type])
  @@index([created_at])
}

// ==================== TEACHER DASHBOARD MODELS ====================

// New model for teacher notes on students
model TeacherNote {
  id          String    @id @default(uuid()) @db.Uuid
  teacher_id  String    @db.Uuid
  student_id  String    @db.Uuid
  content     String
  created_at  DateTime  @default(now()) @db.Timestamptz()
  updated_at  DateTime  @updatedAt @db.Timestamptz()
  
  // Relations
  teacher     User      @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  student     User      @relation("StudentNotes", fields: [student_id], references: [id], onDelete: Cascade)

  @@map("teacher_notes")
  @@index([teacher_id])
  @@index([student_id])
}

// New model for student feedback
model StudentFeedback {
  id          String       @id @default(uuid()) @db.Uuid
  student_id  String       @db.Uuid
  teacher_id  String       @db.Uuid
  content     String
  feedback_type FeedbackType
  created_at  DateTime     @default(now()) @db.Timestamptz()
  
  // Relations
  student     User        @relation("FeedbackFrom", fields: [student_id], references: [id], onDelete: Cascade)
  teacher     User        @relation("FeedbackTo", fields: [teacher_id], references: [id], onDelete: Cascade)

  @@map("student_feedback")
  @@index([student_id])
  @@index([teacher_id])
}

// New model for class management
model Class {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String?
  subject_id  String    @db.Uuid
  teacher_id  String    @db.Uuid
  start_date  DateTime  @db.Date
  end_date    DateTime? @db.Date
  created_at  DateTime  @default(now()) @db.Timestamptz()
  updated_at  DateTime  @updatedAt @db.Timestamptz()
  
  // Relations
  subject     Subject   @relation(fields: [subject_id], references: [id])
  teacher     User      @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  students    ClassStudent[]
  courses     ClassCourse[]
  announcements Announcement[]

  @@map("classes")
  @@index([teacher_id])
  @@index([subject_id])
}

// New model for class-student relationship
model ClassStudent {
  class_id    String    @db.Uuid
  student_id  String    @db.Uuid
  joined_at   DateTime  @default(now()) @db.Timestamptz()
  
  // Relations
  class       Class     @relation(fields: [class_id], references: [id], onDelete: Cascade)
  student     User      @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@id([class_id, student_id])
  @@map("class_students")
  @@index([class_id])
  @@index([student_id])
}

// New model for class-course relationship
model ClassCourse {
  class_id    String    @db.Uuid
  course_id   String    @db.Uuid
  assigned_at DateTime  @default(now()) @db.Timestamptz()
  
  // Relations
  class       Class     @relation(fields: [class_id], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@id([class_id, course_id])
  @@map("class_courses")
  @@index([class_id])
  @@index([course_id])
}

// New model for class announcements
model Announcement {
  id          String    @id @default(uuid()) @db.Uuid
  class_id    String    @db.Uuid
  teacher_id  String    @db.Uuid
  title       String
  content     String
  created_at  DateTime  @default(now()) @db.Timestamptz()
  updated_at  DateTime  @updatedAt @db.Timestamptz()
  
  // Relations
  class       Class     @relation(fields: [class_id], references: [id], onDelete: Cascade)
  teacher     User      @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@map("announcements")
  @@index([class_id])
  @@index([teacher_id])
}

// New model for student performance analytics
model StudentPerformance {
  id              String    @id @default(uuid()) @db.Uuid
  student_id      String    @db.Uuid
  course_id       String?   @db.Uuid
  class_id        String?   @db.Uuid
  quiz_average    Float?
  completion_rate Float?
  engagement_score Float?
  strengths       String[]
  weaknesses      String[]
  recorded_at     DateTime  @default(now()) @db.Timestamptz()

  @@map("student_performance")
  @@index([student_id])
  @@index([course_id])
  @@index([class_id])
  @@index([recorded_at])
}

// New model for tracking teaching activities
model TeachingActivity {
  id          String    @id @default(uuid()) @db.Uuid
  teacher_id  String    @db.Uuid
  activity_type String
  description String
  metadata    Json?
  created_at  DateTime  @default(now()) @db.Timestamptz()

  @@map("teaching_activities")
  @@index([teacher_id])
  @@index([activity_type])
  @@index([created_at])
}
